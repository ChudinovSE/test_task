/*!
\file
\brief Заголовочный файл с описанием заданного формата данных

Данный файл содержит в себе определения структур, 
и прототипов функций для хранения и обработки данных в заданном 
условием задачи формате
*/

/*!
\brief Хранение тестовых данных.

Структура хранения данных, описанная в условиях задачи                  
 */
typedef struct StatData {
    long id;
    int count;
    float cost;
    unsigned int primary:1;
    unsigned int mode:3;
} StatData;

/*!
Загружает массив тестовых данных из файла 
\param[in] path Указатель на строку, содержащую путь к 
файлу, для загрузки данных
\param[out] n Указатель на целое число, в него 
сохраниться число прочитанных из файла структур (длина прочитанного массива)
\return Указатель на массив прочитанных структур
*/
StatData* load_dump(char *path, int *n);

/*!
Объединяет два массива, в соответствии с правилами п.2 тестового задания 
\param[in] data_array_a Указатель на массив структур тестовых данных А
\param[in] n_a Указатель на целое число, равное количеству структур в 
массиве А (длина массива А)
\param[in] data_array_b Указатель на массив структур тестовых данных Б
\param[in] n_b Указатель на целое число, равное количеству структур в 
массиве Б (длина массива Б)
\param[out] n_res Указатель на целое число, в него 
сохраниться число структур в итоговом массиве (длина итогового массива)
\return Указатель на итоговый массив структур
*/
StatData* join_dump(StatData *data_array_a, int *n_a, StatData *data_array_b, int *n_b, int *n_res);

/*!
Сохраняет массив тестовых данных в файл 
\param[in] path Указатель на строку, содержащую путь к 
файлу, для сохранения данных
\param[in] data_array Указатель на массив структур тестовых данных 
для сохранения
\param[in] n Указатель на целое число, равное количеству структур
в массиве для сохранения в фаил  (длина массива для сохранения)
\return Код ошибки 0 - успешное сохранение 1 - ошибка при открытии файла
*/
int store_dump(char *path, const StatData *data_array, int *n);

/*!
Сортирует массив тестовых данных по полю cost используя стандартную 
функцию qsort из stdlib
\param[in] data_array Указатель на массив структур тестовых данных 
для сортировки
\param[in] n Указатель на целое число, равное количеству структур
в массиве  (длина массива)
\return Код ошибки 0 - успешное сохранение
*/
int sort_dump_std(StatData *data_array, int *n);

/*!
Сортирует массив тестовых данных по полю cost используя собственную
реализацию метода "пузырек"
\param[in] data_array Указатель на массив структур тестовых данных 
для сортировки
\param[in] n Указатель на целое число, равное количеству структур
в массиве  (длина массива)
\return Код ошибки 0 - успешное сохранение
*/
int sort_dump(StatData *data_array, int *n);

/*!
Выводит первые строки (не более 10) массива тестовых данных 
в виде таблицы, по правилам описанным в п.3 тестового задания
\param[in] data_array Указатель на массив структур тестовых данных 
для вывода
\param[in] n Указатель на целое число, равное количеству структур
в массиве  (длина массива)
\return Код ошибки 0 - успешное выполнение
*/
int print_stat_data_table(const StatData *data, int *n);

/*!
Генерирует массивы тестовых данных со случайным значением в каждом 
поле (используется для ручного тестирования и отладки)
\param[out] data_array Указатель на массив структур для сохранения
тестовых данных
\param[in] n Указатель на целое число, равное количеству структур
в массиве  (длина массива)
\return Код ошибки 0 - успешное сохранение
*/
int generation_rnd_data_array(StatData *data_array, int *n);